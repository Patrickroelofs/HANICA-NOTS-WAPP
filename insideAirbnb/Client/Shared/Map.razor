@using System.Text.Json
@using insideAirbnb.Shared;
@inject IJSRuntime _jsRuntime
@inject IHttpClientFactory _clientFactory
@inject IConfiguration _configuration

<div class="loginDisplay">
    <LoginDisplay />
</div>
<div id='mapBox'></div>
<Filter></Filter>
@if(ShowSelectedListing && SelectedListing != null)
{
    <Sidebar SelectedListing="@SelectedListing" BackButton="@HandleBackButton" AverageNeighbourhoodPrice="@AverageNeighbourhoodPrice"></Sidebar>
}




@code
{
    [Parameter]
    public FilterParameters Parameters { get; set; } = new();
    private DotNetObjectReference<Map> _reference;
    private HttpClient Client { get; set; }
    public bool ShowSelectedListing;
    public Listings SelectedListing;
    private int AverageNeighbourhoodPrice;

    protected override async Task OnInitializedAsync()
    {
        Client = _clientFactory.CreateClient("Api");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            _reference = DotNetObjectReference.Create(this);
            await _jsRuntime.InvokeVoidAsync(
                "mapbox.init", 
                _reference, 
                $"{_configuration["apiUrl"]}/listings/geojson", 
                $"{_configuration["apiUrl"]}/neighbourhoods/geojson"
            );
        }
    }

    [JSInvokable]
    public async Task PointClicked(int id)
    {
        var listing = await Client.GetFromJsonAsync<Listings>($"{_configuration["apiUrl"]}/listings/id/{id}");
        AverageNeighbourhoodPrice = await Client.GetFromJsonAsync<int>($"/graph/neighbourhood?neighbourhood={@listing.NeighbourhoodCleansed}");
        
        SelectedListing = listing;
        ShowSelectedListing = true;
        StateHasChanged();
    }

    private void HandleBackButton()
    {
        SelectedListing = null;
        ShowSelectedListing = false;
        StateHasChanged();
    }
}